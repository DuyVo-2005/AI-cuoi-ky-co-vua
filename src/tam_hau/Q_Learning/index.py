import random
import os
from collections import defaultdict
from .q_learning_model_generation import q_learning, load_q_model, default_q_values

BOARD_SIZE = 8
EPISODES = 5000
ALPHA = 0.1          # Learning rate
GAMMA = 0.9          # Discount factor
EPSILON = 0.1        # Exploration rate

# H√†m ki·ªÉm tra xem c√≥ xung ƒë·ªôt khi ƒë·∫∑t h·∫≠u ·ªü c·ªôt col kh√¥ng
def is_safe(state, row, col):
    for r, c in enumerate(state):
        if c == col or abs(c - col) == abs(r - row):
            return False
    return True


# üß† Sau hu·∫•n luy·ªán: ch∆°i th·ª≠
def solve_q_learning(insert, clear, text_1):
    Q = load_q_model()
    state = tuple()
    for row in range(BOARD_SIZE):
        action = Q[state].index(max(Q[state]))
        if not is_safe(state, row, action):
            print("Th·∫•t b·∫°i t·∫°i h√†ng", row)
            print("Tr·∫°ng th√°i: ", state)
            print("H√†ng ƒë·ªông", action)
            clear(text_1)
            insert(text_1, "Th·∫•t b·∫°i t·∫°i h√†ng " + str(row) + "\n")
            insert(text_1, "Tr·∫°ng th√°i: " + str(state) + "\n")
            insert(text_1, "H√†ng ƒë·ªông: " + str(action) + "\n")
            return False
        state = state + (action,)
    print("Th√†nh c√¥ng! Gi·∫£i: ", state)
    clear(text_1)
    insert(text_1, "Th√†nh c√¥ng! Gi·∫£i: " + str(state) + "\n")
    state = tuple(x + 1 for x in state)
    save_solution_to_file(state)
    insert(text_1, "ƒê√£ l∆∞u gi·∫£i ph√°p v√†o file solution.txt\n")
    return True

def save_solution_to_file(solution):
     # L·∫•y ƒë∆∞·ªùng d·∫´n tuy·ªát ƒë·ªëi ƒë·∫øn th∆∞ m·ª•c ch·ª©a file bfs.py
    base_dir = os.path.dirname(os.path.abspath(__file__))
    file_path = os.path.join(base_dir, "../", "data", "solution.txt")

    with open(file_path, "w") as f:
        if solution:
            solution_str = ''.join(map(str, solution)) 
            f.write(f"{solution_str}\n")
        else:
            f.write("Khong tim thay nghiem.\n")

# solve_q_learning()
